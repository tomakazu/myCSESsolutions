#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define block 447
ll n,q;
ll *lazy = new ll[8*100000+1]();
ll *tree = new ll[8*100000+1]();
ll *arr = new ll[200001]();

void buildtree(ll low,ll high,ll node){
	
	if(low==high){
		tree[node] = arr[low];
		return;
	}
	
	ll mid = (low+high)/2;
	
	buildtree(low,mid,2*node);
	buildtree(mid+1,high,2*node+1);
}

void updateLazy(ll a,ll b,ll val,ll low,ll high,ll node){
	
	//cout<<low<<" "<<high<<"\n";
	if(low>b||high<a){
		return;
	}
	if(low==high){
		tree[node]+=val;
		//cout<<tree[node]<<"\n";
		return;
	}

	if(lazy[node]!=0){
		lazy[2*node]+=lazy[node];
		lazy[2*node+1]+=lazy[node];
		lazy[node] = 0;
	}
	
	if(low>=a&&high<=b){
		lazy[2*node]+=val;
		lazy[2*node+1]+=val;
		return;
	}
	ll mid = (low+high)/2;
	updateLazy(a,b,val,low,mid,2*node);
	updateLazy(a,b,val,mid+1,high,2*node+1);
	
}
ll getNum(ll pos,ll low,ll high,ll node){
	
	if(low==high){
		if(lazy[node]!=0){
			tree[node]+=lazy[node];
			lazy[node] = 0;
		}
		return tree[node];
	}
	
	if(lazy[node]!=0){
		lazy[2*node]+=lazy[node];
		lazy[2*node+1]+=lazy[node];
		lazy[node] = 0;
	}
	ll mid = (low+high)/2;
	
	if(mid>=pos){
		return getNum(pos,low,mid,node*2);
	}else{
		return getNum(pos,mid+1,high,2*node+1);
	}
}
int main(){
	
//	freopen("test_input.txt","r",stdin);
	cin>>n>>q;
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	buildtree(0,n-1,1);
	while(q--){
		ll t;
		cin>>t;
		if(t==1){
			ll a,b,u;
			cin>>a>>b>>u;
			a--;
			b--;
			updateLazy(a,b,u,0,n-1,1);
		}else{
			ll k;
			cin>>k;
			k--;
			cout<<getNum(k,0,n-1,1)<<"\n";
		}
	}
	delete [] arr;
	delete [] lazy;
	delete [] tree;
	
}
